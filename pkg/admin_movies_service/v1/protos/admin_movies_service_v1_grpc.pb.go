// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.24.3
// source: admin_movies_service_v1.proto

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MoviesServiceV1Client is the client API for MoviesServiceV1 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MoviesServiceV1Client interface {
	// Returns movie with the specified id.
	GetMovie(ctx context.Context, in *GetMovieRequest, opts ...grpc.CallOption) (*Movie, error)
	// Returns movie duration for the movie with specified id.
	GetMovieDuration(ctx context.Context, in *GetMovieDurationRequest, opts ...grpc.CallOption) (*MovieDuration, error)
	// Returns movies with the specified ids.
	GetMovies(ctx context.Context, in *GetMoviesRequest, opts ...grpc.CallOption) (*Movies, error)
	// Returns movies durations with the specified ids.
	GetMoviesDuration(ctx context.Context, in *GetMoviesDurationRequest, opts ...grpc.CallOption) (*MoviesDuration, error)
	// Create movie, returns created movie id.
	CreateMovie(ctx context.Context, in *CreateMovieRequest, opts ...grpc.CallOption) (*CreateMovieResponce, error)
	// Delete movie with the specified ids.
	DeleteMovie(ctx context.Context, in *DeleteMovieRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Check movie existance, returns false, if movie doesn't exist.
	IsMovieExists(ctx context.Context, in *IsMovieExistsRequest, opts ...grpc.CallOption) (*IsMovieExistsResponce, error)
	// Update movie fields.
	UpdateMovie(ctx context.Context, in *UpdateMovieRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Update movie pictures.
	UpdateMoviePictures(ctx context.Context, in *UpdateMoviePicturesRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Returns all age ratings.
	GetAgeRatings(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*AgeRatings, error)
	// Create age rating.
	CreateAgeRating(ctx context.Context, in *CreateAgeRatingRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Delete age rating.
	DeleteAgeRating(ctx context.Context, in *DeleteAgeRatingRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Returns genre with specified id.
	GetGenre(ctx context.Context, in *GetGenreRequest, opts ...grpc.CallOption) (*Genre, error)
	// Returns genre with specified name.
	GetGenreByName(ctx context.Context, in *GetGenreByNameRequest, opts ...grpc.CallOption) (*Genre, error)
	// Create genre.
	CreateGenre(ctx context.Context, in *CreateGenreRequest, opts ...grpc.CallOption) (*CreateGenreResponce, error)
	// Returns all genres.
	GetGenres(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Genres, error)
	// Update genre with specified id.
	UpdateGenre(ctx context.Context, in *UpdateGenreRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Delete genre with specified id.
	DeleteGenre(ctx context.Context, in *DeleteGenreRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Check genres existance, returns false and not exists ids, if any genre in request doesn't exist.
	IsGenresExists(ctx context.Context, in *IsGenresExistsRequest, opts ...grpc.CallOption) (*ExistsResponce, error)
	// Returns county with specified id.
	GetCountry(ctx context.Context, in *GetCountryRequest, opts ...grpc.CallOption) (*Country, error)
	// Returns country with specified name.
	GetCountryByName(ctx context.Context, in *GetCountryByNameRequest, opts ...grpc.CallOption) (*Country, error)
	// Create country.
	CreateCountry(ctx context.Context, in *CreateCountryRequest, opts ...grpc.CallOption) (*CreateCountryResponce, error)
	// Returns all countries.
	GetCountries(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Countries, error)
	// Update country with specified id.
	UpdateCountry(ctx context.Context, in *UpdateCountryRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Delete country with specified id.
	DeleteCountry(ctx context.Context, in *DeleteCountryRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Check countries existance, returns false and not exists ids, if any country in request doesn't exist.
	IsCountriesExists(ctx context.Context, in *IsCountriesExistsRequest, opts ...grpc.CallOption) (*ExistsResponce, error)
}

type moviesServiceV1Client struct {
	cc grpc.ClientConnInterface
}

func NewMoviesServiceV1Client(cc grpc.ClientConnInterface) MoviesServiceV1Client {
	return &moviesServiceV1Client{cc}
}

func (c *moviesServiceV1Client) GetMovie(ctx context.Context, in *GetMovieRequest, opts ...grpc.CallOption) (*Movie, error) {
	out := new(Movie)
	err := c.cc.Invoke(ctx, "/admin_movies_service.moviesServiceV1/GetMovie", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moviesServiceV1Client) GetMovieDuration(ctx context.Context, in *GetMovieDurationRequest, opts ...grpc.CallOption) (*MovieDuration, error) {
	out := new(MovieDuration)
	err := c.cc.Invoke(ctx, "/admin_movies_service.moviesServiceV1/GetMovieDuration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moviesServiceV1Client) GetMovies(ctx context.Context, in *GetMoviesRequest, opts ...grpc.CallOption) (*Movies, error) {
	out := new(Movies)
	err := c.cc.Invoke(ctx, "/admin_movies_service.moviesServiceV1/GetMovies", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moviesServiceV1Client) GetMoviesDuration(ctx context.Context, in *GetMoviesDurationRequest, opts ...grpc.CallOption) (*MoviesDuration, error) {
	out := new(MoviesDuration)
	err := c.cc.Invoke(ctx, "/admin_movies_service.moviesServiceV1/GetMoviesDuration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moviesServiceV1Client) CreateMovie(ctx context.Context, in *CreateMovieRequest, opts ...grpc.CallOption) (*CreateMovieResponce, error) {
	out := new(CreateMovieResponce)
	err := c.cc.Invoke(ctx, "/admin_movies_service.moviesServiceV1/CreateMovie", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moviesServiceV1Client) DeleteMovie(ctx context.Context, in *DeleteMovieRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/admin_movies_service.moviesServiceV1/DeleteMovie", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moviesServiceV1Client) IsMovieExists(ctx context.Context, in *IsMovieExistsRequest, opts ...grpc.CallOption) (*IsMovieExistsResponce, error) {
	out := new(IsMovieExistsResponce)
	err := c.cc.Invoke(ctx, "/admin_movies_service.moviesServiceV1/IsMovieExists", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moviesServiceV1Client) UpdateMovie(ctx context.Context, in *UpdateMovieRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/admin_movies_service.moviesServiceV1/UpdateMovie", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moviesServiceV1Client) UpdateMoviePictures(ctx context.Context, in *UpdateMoviePicturesRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/admin_movies_service.moviesServiceV1/UpdateMoviePictures", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moviesServiceV1Client) GetAgeRatings(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*AgeRatings, error) {
	out := new(AgeRatings)
	err := c.cc.Invoke(ctx, "/admin_movies_service.moviesServiceV1/GetAgeRatings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moviesServiceV1Client) CreateAgeRating(ctx context.Context, in *CreateAgeRatingRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/admin_movies_service.moviesServiceV1/CreateAgeRating", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moviesServiceV1Client) DeleteAgeRating(ctx context.Context, in *DeleteAgeRatingRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/admin_movies_service.moviesServiceV1/DeleteAgeRating", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moviesServiceV1Client) GetGenre(ctx context.Context, in *GetGenreRequest, opts ...grpc.CallOption) (*Genre, error) {
	out := new(Genre)
	err := c.cc.Invoke(ctx, "/admin_movies_service.moviesServiceV1/GetGenre", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moviesServiceV1Client) GetGenreByName(ctx context.Context, in *GetGenreByNameRequest, opts ...grpc.CallOption) (*Genre, error) {
	out := new(Genre)
	err := c.cc.Invoke(ctx, "/admin_movies_service.moviesServiceV1/GetGenreByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moviesServiceV1Client) CreateGenre(ctx context.Context, in *CreateGenreRequest, opts ...grpc.CallOption) (*CreateGenreResponce, error) {
	out := new(CreateGenreResponce)
	err := c.cc.Invoke(ctx, "/admin_movies_service.moviesServiceV1/CreateGenre", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moviesServiceV1Client) GetGenres(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Genres, error) {
	out := new(Genres)
	err := c.cc.Invoke(ctx, "/admin_movies_service.moviesServiceV1/GetGenres", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moviesServiceV1Client) UpdateGenre(ctx context.Context, in *UpdateGenreRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/admin_movies_service.moviesServiceV1/UpdateGenre", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moviesServiceV1Client) DeleteGenre(ctx context.Context, in *DeleteGenreRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/admin_movies_service.moviesServiceV1/DeleteGenre", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moviesServiceV1Client) IsGenresExists(ctx context.Context, in *IsGenresExistsRequest, opts ...grpc.CallOption) (*ExistsResponce, error) {
	out := new(ExistsResponce)
	err := c.cc.Invoke(ctx, "/admin_movies_service.moviesServiceV1/IsGenresExists", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moviesServiceV1Client) GetCountry(ctx context.Context, in *GetCountryRequest, opts ...grpc.CallOption) (*Country, error) {
	out := new(Country)
	err := c.cc.Invoke(ctx, "/admin_movies_service.moviesServiceV1/GetCountry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moviesServiceV1Client) GetCountryByName(ctx context.Context, in *GetCountryByNameRequest, opts ...grpc.CallOption) (*Country, error) {
	out := new(Country)
	err := c.cc.Invoke(ctx, "/admin_movies_service.moviesServiceV1/GetCountryByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moviesServiceV1Client) CreateCountry(ctx context.Context, in *CreateCountryRequest, opts ...grpc.CallOption) (*CreateCountryResponce, error) {
	out := new(CreateCountryResponce)
	err := c.cc.Invoke(ctx, "/admin_movies_service.moviesServiceV1/CreateCountry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moviesServiceV1Client) GetCountries(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Countries, error) {
	out := new(Countries)
	err := c.cc.Invoke(ctx, "/admin_movies_service.moviesServiceV1/GetCountries", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moviesServiceV1Client) UpdateCountry(ctx context.Context, in *UpdateCountryRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/admin_movies_service.moviesServiceV1/UpdateCountry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moviesServiceV1Client) DeleteCountry(ctx context.Context, in *DeleteCountryRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/admin_movies_service.moviesServiceV1/DeleteCountry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moviesServiceV1Client) IsCountriesExists(ctx context.Context, in *IsCountriesExistsRequest, opts ...grpc.CallOption) (*ExistsResponce, error) {
	out := new(ExistsResponce)
	err := c.cc.Invoke(ctx, "/admin_movies_service.moviesServiceV1/IsCountriesExists", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MoviesServiceV1Server is the server API for MoviesServiceV1 service.
// All implementations must embed UnimplementedMoviesServiceV1Server
// for forward compatibility
type MoviesServiceV1Server interface {
	// Returns movie with the specified id.
	GetMovie(context.Context, *GetMovieRequest) (*Movie, error)
	// Returns movie duration for the movie with specified id.
	GetMovieDuration(context.Context, *GetMovieDurationRequest) (*MovieDuration, error)
	// Returns movies with the specified ids.
	GetMovies(context.Context, *GetMoviesRequest) (*Movies, error)
	// Returns movies durations with the specified ids.
	GetMoviesDuration(context.Context, *GetMoviesDurationRequest) (*MoviesDuration, error)
	// Create movie, returns created movie id.
	CreateMovie(context.Context, *CreateMovieRequest) (*CreateMovieResponce, error)
	// Delete movie with the specified ids.
	DeleteMovie(context.Context, *DeleteMovieRequest) (*emptypb.Empty, error)
	// Check movie existance, returns false, if movie doesn't exist.
	IsMovieExists(context.Context, *IsMovieExistsRequest) (*IsMovieExistsResponce, error)
	// Update movie fields.
	UpdateMovie(context.Context, *UpdateMovieRequest) (*emptypb.Empty, error)
	// Update movie pictures.
	UpdateMoviePictures(context.Context, *UpdateMoviePicturesRequest) (*emptypb.Empty, error)
	// Returns all age ratings.
	GetAgeRatings(context.Context, *emptypb.Empty) (*AgeRatings, error)
	// Create age rating.
	CreateAgeRating(context.Context, *CreateAgeRatingRequest) (*emptypb.Empty, error)
	// Delete age rating.
	DeleteAgeRating(context.Context, *DeleteAgeRatingRequest) (*emptypb.Empty, error)
	// Returns genre with specified id.
	GetGenre(context.Context, *GetGenreRequest) (*Genre, error)
	// Returns genre with specified name.
	GetGenreByName(context.Context, *GetGenreByNameRequest) (*Genre, error)
	// Create genre.
	CreateGenre(context.Context, *CreateGenreRequest) (*CreateGenreResponce, error)
	// Returns all genres.
	GetGenres(context.Context, *emptypb.Empty) (*Genres, error)
	// Update genre with specified id.
	UpdateGenre(context.Context, *UpdateGenreRequest) (*emptypb.Empty, error)
	// Delete genre with specified id.
	DeleteGenre(context.Context, *DeleteGenreRequest) (*emptypb.Empty, error)
	// Check genres existance, returns false and not exists ids, if any genre in request doesn't exist.
	IsGenresExists(context.Context, *IsGenresExistsRequest) (*ExistsResponce, error)
	// Returns county with specified id.
	GetCountry(context.Context, *GetCountryRequest) (*Country, error)
	// Returns country with specified name.
	GetCountryByName(context.Context, *GetCountryByNameRequest) (*Country, error)
	// Create country.
	CreateCountry(context.Context, *CreateCountryRequest) (*CreateCountryResponce, error)
	// Returns all countries.
	GetCountries(context.Context, *emptypb.Empty) (*Countries, error)
	// Update country with specified id.
	UpdateCountry(context.Context, *UpdateCountryRequest) (*emptypb.Empty, error)
	// Delete country with specified id.
	DeleteCountry(context.Context, *DeleteCountryRequest) (*emptypb.Empty, error)
	// Check countries existance, returns false and not exists ids, if any country in request doesn't exist.
	IsCountriesExists(context.Context, *IsCountriesExistsRequest) (*ExistsResponce, error)
	mustEmbedUnimplementedMoviesServiceV1Server()
}

// UnimplementedMoviesServiceV1Server must be embedded to have forward compatible implementations.
type UnimplementedMoviesServiceV1Server struct {
}

func (UnimplementedMoviesServiceV1Server) GetMovie(context.Context, *GetMovieRequest) (*Movie, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMovie not implemented")
}
func (UnimplementedMoviesServiceV1Server) GetMovieDuration(context.Context, *GetMovieDurationRequest) (*MovieDuration, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMovieDuration not implemented")
}
func (UnimplementedMoviesServiceV1Server) GetMovies(context.Context, *GetMoviesRequest) (*Movies, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMovies not implemented")
}
func (UnimplementedMoviesServiceV1Server) GetMoviesDuration(context.Context, *GetMoviesDurationRequest) (*MoviesDuration, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMoviesDuration not implemented")
}
func (UnimplementedMoviesServiceV1Server) CreateMovie(context.Context, *CreateMovieRequest) (*CreateMovieResponce, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMovie not implemented")
}
func (UnimplementedMoviesServiceV1Server) DeleteMovie(context.Context, *DeleteMovieRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMovie not implemented")
}
func (UnimplementedMoviesServiceV1Server) IsMovieExists(context.Context, *IsMovieExistsRequest) (*IsMovieExistsResponce, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsMovieExists not implemented")
}
func (UnimplementedMoviesServiceV1Server) UpdateMovie(context.Context, *UpdateMovieRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMovie not implemented")
}
func (UnimplementedMoviesServiceV1Server) UpdateMoviePictures(context.Context, *UpdateMoviePicturesRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMoviePictures not implemented")
}
func (UnimplementedMoviesServiceV1Server) GetAgeRatings(context.Context, *emptypb.Empty) (*AgeRatings, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAgeRatings not implemented")
}
func (UnimplementedMoviesServiceV1Server) CreateAgeRating(context.Context, *CreateAgeRatingRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAgeRating not implemented")
}
func (UnimplementedMoviesServiceV1Server) DeleteAgeRating(context.Context, *DeleteAgeRatingRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAgeRating not implemented")
}
func (UnimplementedMoviesServiceV1Server) GetGenre(context.Context, *GetGenreRequest) (*Genre, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGenre not implemented")
}
func (UnimplementedMoviesServiceV1Server) GetGenreByName(context.Context, *GetGenreByNameRequest) (*Genre, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGenreByName not implemented")
}
func (UnimplementedMoviesServiceV1Server) CreateGenre(context.Context, *CreateGenreRequest) (*CreateGenreResponce, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGenre not implemented")
}
func (UnimplementedMoviesServiceV1Server) GetGenres(context.Context, *emptypb.Empty) (*Genres, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGenres not implemented")
}
func (UnimplementedMoviesServiceV1Server) UpdateGenre(context.Context, *UpdateGenreRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGenre not implemented")
}
func (UnimplementedMoviesServiceV1Server) DeleteGenre(context.Context, *DeleteGenreRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteGenre not implemented")
}
func (UnimplementedMoviesServiceV1Server) IsGenresExists(context.Context, *IsGenresExistsRequest) (*ExistsResponce, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsGenresExists not implemented")
}
func (UnimplementedMoviesServiceV1Server) GetCountry(context.Context, *GetCountryRequest) (*Country, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCountry not implemented")
}
func (UnimplementedMoviesServiceV1Server) GetCountryByName(context.Context, *GetCountryByNameRequest) (*Country, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCountryByName not implemented")
}
func (UnimplementedMoviesServiceV1Server) CreateCountry(context.Context, *CreateCountryRequest) (*CreateCountryResponce, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCountry not implemented")
}
func (UnimplementedMoviesServiceV1Server) GetCountries(context.Context, *emptypb.Empty) (*Countries, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCountries not implemented")
}
func (UnimplementedMoviesServiceV1Server) UpdateCountry(context.Context, *UpdateCountryRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCountry not implemented")
}
func (UnimplementedMoviesServiceV1Server) DeleteCountry(context.Context, *DeleteCountryRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCountry not implemented")
}
func (UnimplementedMoviesServiceV1Server) IsCountriesExists(context.Context, *IsCountriesExistsRequest) (*ExistsResponce, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsCountriesExists not implemented")
}
func (UnimplementedMoviesServiceV1Server) mustEmbedUnimplementedMoviesServiceV1Server() {}

// UnsafeMoviesServiceV1Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MoviesServiceV1Server will
// result in compilation errors.
type UnsafeMoviesServiceV1Server interface {
	mustEmbedUnimplementedMoviesServiceV1Server()
}

func RegisterMoviesServiceV1Server(s grpc.ServiceRegistrar, srv MoviesServiceV1Server) {
	s.RegisterService(&MoviesServiceV1_ServiceDesc, srv)
}

func _MoviesServiceV1_GetMovie_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMovieRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MoviesServiceV1Server).GetMovie(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin_movies_service.moviesServiceV1/GetMovie",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MoviesServiceV1Server).GetMovie(ctx, req.(*GetMovieRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MoviesServiceV1_GetMovieDuration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMovieDurationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MoviesServiceV1Server).GetMovieDuration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin_movies_service.moviesServiceV1/GetMovieDuration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MoviesServiceV1Server).GetMovieDuration(ctx, req.(*GetMovieDurationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MoviesServiceV1_GetMovies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMoviesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MoviesServiceV1Server).GetMovies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin_movies_service.moviesServiceV1/GetMovies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MoviesServiceV1Server).GetMovies(ctx, req.(*GetMoviesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MoviesServiceV1_GetMoviesDuration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMoviesDurationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MoviesServiceV1Server).GetMoviesDuration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin_movies_service.moviesServiceV1/GetMoviesDuration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MoviesServiceV1Server).GetMoviesDuration(ctx, req.(*GetMoviesDurationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MoviesServiceV1_CreateMovie_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMovieRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MoviesServiceV1Server).CreateMovie(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin_movies_service.moviesServiceV1/CreateMovie",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MoviesServiceV1Server).CreateMovie(ctx, req.(*CreateMovieRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MoviesServiceV1_DeleteMovie_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMovieRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MoviesServiceV1Server).DeleteMovie(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin_movies_service.moviesServiceV1/DeleteMovie",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MoviesServiceV1Server).DeleteMovie(ctx, req.(*DeleteMovieRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MoviesServiceV1_IsMovieExists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsMovieExistsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MoviesServiceV1Server).IsMovieExists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin_movies_service.moviesServiceV1/IsMovieExists",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MoviesServiceV1Server).IsMovieExists(ctx, req.(*IsMovieExistsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MoviesServiceV1_UpdateMovie_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMovieRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MoviesServiceV1Server).UpdateMovie(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin_movies_service.moviesServiceV1/UpdateMovie",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MoviesServiceV1Server).UpdateMovie(ctx, req.(*UpdateMovieRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MoviesServiceV1_UpdateMoviePictures_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMoviePicturesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MoviesServiceV1Server).UpdateMoviePictures(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin_movies_service.moviesServiceV1/UpdateMoviePictures",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MoviesServiceV1Server).UpdateMoviePictures(ctx, req.(*UpdateMoviePicturesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MoviesServiceV1_GetAgeRatings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MoviesServiceV1Server).GetAgeRatings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin_movies_service.moviesServiceV1/GetAgeRatings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MoviesServiceV1Server).GetAgeRatings(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _MoviesServiceV1_CreateAgeRating_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAgeRatingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MoviesServiceV1Server).CreateAgeRating(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin_movies_service.moviesServiceV1/CreateAgeRating",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MoviesServiceV1Server).CreateAgeRating(ctx, req.(*CreateAgeRatingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MoviesServiceV1_DeleteAgeRating_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAgeRatingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MoviesServiceV1Server).DeleteAgeRating(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin_movies_service.moviesServiceV1/DeleteAgeRating",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MoviesServiceV1Server).DeleteAgeRating(ctx, req.(*DeleteAgeRatingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MoviesServiceV1_GetGenre_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGenreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MoviesServiceV1Server).GetGenre(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin_movies_service.moviesServiceV1/GetGenre",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MoviesServiceV1Server).GetGenre(ctx, req.(*GetGenreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MoviesServiceV1_GetGenreByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGenreByNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MoviesServiceV1Server).GetGenreByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin_movies_service.moviesServiceV1/GetGenreByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MoviesServiceV1Server).GetGenreByName(ctx, req.(*GetGenreByNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MoviesServiceV1_CreateGenre_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGenreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MoviesServiceV1Server).CreateGenre(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin_movies_service.moviesServiceV1/CreateGenre",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MoviesServiceV1Server).CreateGenre(ctx, req.(*CreateGenreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MoviesServiceV1_GetGenres_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MoviesServiceV1Server).GetGenres(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin_movies_service.moviesServiceV1/GetGenres",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MoviesServiceV1Server).GetGenres(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _MoviesServiceV1_UpdateGenre_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGenreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MoviesServiceV1Server).UpdateGenre(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin_movies_service.moviesServiceV1/UpdateGenre",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MoviesServiceV1Server).UpdateGenre(ctx, req.(*UpdateGenreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MoviesServiceV1_DeleteGenre_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteGenreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MoviesServiceV1Server).DeleteGenre(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin_movies_service.moviesServiceV1/DeleteGenre",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MoviesServiceV1Server).DeleteGenre(ctx, req.(*DeleteGenreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MoviesServiceV1_IsGenresExists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsGenresExistsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MoviesServiceV1Server).IsGenresExists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin_movies_service.moviesServiceV1/IsGenresExists",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MoviesServiceV1Server).IsGenresExists(ctx, req.(*IsGenresExistsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MoviesServiceV1_GetCountry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCountryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MoviesServiceV1Server).GetCountry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin_movies_service.moviesServiceV1/GetCountry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MoviesServiceV1Server).GetCountry(ctx, req.(*GetCountryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MoviesServiceV1_GetCountryByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCountryByNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MoviesServiceV1Server).GetCountryByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin_movies_service.moviesServiceV1/GetCountryByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MoviesServiceV1Server).GetCountryByName(ctx, req.(*GetCountryByNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MoviesServiceV1_CreateCountry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCountryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MoviesServiceV1Server).CreateCountry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin_movies_service.moviesServiceV1/CreateCountry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MoviesServiceV1Server).CreateCountry(ctx, req.(*CreateCountryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MoviesServiceV1_GetCountries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MoviesServiceV1Server).GetCountries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin_movies_service.moviesServiceV1/GetCountries",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MoviesServiceV1Server).GetCountries(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _MoviesServiceV1_UpdateCountry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCountryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MoviesServiceV1Server).UpdateCountry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin_movies_service.moviesServiceV1/UpdateCountry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MoviesServiceV1Server).UpdateCountry(ctx, req.(*UpdateCountryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MoviesServiceV1_DeleteCountry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCountryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MoviesServiceV1Server).DeleteCountry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin_movies_service.moviesServiceV1/DeleteCountry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MoviesServiceV1Server).DeleteCountry(ctx, req.(*DeleteCountryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MoviesServiceV1_IsCountriesExists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsCountriesExistsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MoviesServiceV1Server).IsCountriesExists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin_movies_service.moviesServiceV1/IsCountriesExists",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MoviesServiceV1Server).IsCountriesExists(ctx, req.(*IsCountriesExistsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MoviesServiceV1_ServiceDesc is the grpc.ServiceDesc for MoviesServiceV1 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MoviesServiceV1_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "admin_movies_service.moviesServiceV1",
	HandlerType: (*MoviesServiceV1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMovie",
			Handler:    _MoviesServiceV1_GetMovie_Handler,
		},
		{
			MethodName: "GetMovieDuration",
			Handler:    _MoviesServiceV1_GetMovieDuration_Handler,
		},
		{
			MethodName: "GetMovies",
			Handler:    _MoviesServiceV1_GetMovies_Handler,
		},
		{
			MethodName: "GetMoviesDuration",
			Handler:    _MoviesServiceV1_GetMoviesDuration_Handler,
		},
		{
			MethodName: "CreateMovie",
			Handler:    _MoviesServiceV1_CreateMovie_Handler,
		},
		{
			MethodName: "DeleteMovie",
			Handler:    _MoviesServiceV1_DeleteMovie_Handler,
		},
		{
			MethodName: "IsMovieExists",
			Handler:    _MoviesServiceV1_IsMovieExists_Handler,
		},
		{
			MethodName: "UpdateMovie",
			Handler:    _MoviesServiceV1_UpdateMovie_Handler,
		},
		{
			MethodName: "UpdateMoviePictures",
			Handler:    _MoviesServiceV1_UpdateMoviePictures_Handler,
		},
		{
			MethodName: "GetAgeRatings",
			Handler:    _MoviesServiceV1_GetAgeRatings_Handler,
		},
		{
			MethodName: "CreateAgeRating",
			Handler:    _MoviesServiceV1_CreateAgeRating_Handler,
		},
		{
			MethodName: "DeleteAgeRating",
			Handler:    _MoviesServiceV1_DeleteAgeRating_Handler,
		},
		{
			MethodName: "GetGenre",
			Handler:    _MoviesServiceV1_GetGenre_Handler,
		},
		{
			MethodName: "GetGenreByName",
			Handler:    _MoviesServiceV1_GetGenreByName_Handler,
		},
		{
			MethodName: "CreateGenre",
			Handler:    _MoviesServiceV1_CreateGenre_Handler,
		},
		{
			MethodName: "GetGenres",
			Handler:    _MoviesServiceV1_GetGenres_Handler,
		},
		{
			MethodName: "UpdateGenre",
			Handler:    _MoviesServiceV1_UpdateGenre_Handler,
		},
		{
			MethodName: "DeleteGenre",
			Handler:    _MoviesServiceV1_DeleteGenre_Handler,
		},
		{
			MethodName: "IsGenresExists",
			Handler:    _MoviesServiceV1_IsGenresExists_Handler,
		},
		{
			MethodName: "GetCountry",
			Handler:    _MoviesServiceV1_GetCountry_Handler,
		},
		{
			MethodName: "GetCountryByName",
			Handler:    _MoviesServiceV1_GetCountryByName_Handler,
		},
		{
			MethodName: "CreateCountry",
			Handler:    _MoviesServiceV1_CreateCountry_Handler,
		},
		{
			MethodName: "GetCountries",
			Handler:    _MoviesServiceV1_GetCountries_Handler,
		},
		{
			MethodName: "UpdateCountry",
			Handler:    _MoviesServiceV1_UpdateCountry_Handler,
		},
		{
			MethodName: "DeleteCountry",
			Handler:    _MoviesServiceV1_DeleteCountry_Handler,
		},
		{
			MethodName: "IsCountriesExists",
			Handler:    _MoviesServiceV1_IsCountriesExists_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "admin_movies_service_v1.proto",
}
