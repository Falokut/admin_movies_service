// Code generated by MockGen. DO NOT EDIT.
// Source: events.go

// Package mock_events is a generated GoMock package.
package mock_events

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockMoviesEventsMQ is a mock of MoviesEventsMQ interface.
type MockMoviesEventsMQ struct {
	ctrl     *gomock.Controller
	recorder *MockMoviesEventsMQMockRecorder
}

// MockMoviesEventsMQMockRecorder is the mock recorder for MockMoviesEventsMQ.
type MockMoviesEventsMQMockRecorder struct {
	mock *MockMoviesEventsMQ
}

// NewMockMoviesEventsMQ creates a new mock instance.
func NewMockMoviesEventsMQ(ctrl *gomock.Controller) *MockMoviesEventsMQ {
	mock := &MockMoviesEventsMQ{ctrl: ctrl}
	mock.recorder = &MockMoviesEventsMQMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMoviesEventsMQ) EXPECT() *MockMoviesEventsMQMockRecorder {
	return m.recorder
}

// MovieDeleted mocks base method.
func (m *MockMoviesEventsMQ) MovieDeleted(ctx context.Context, id int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MovieDeleted", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// MovieDeleted indicates an expected call of MovieDeleted.
func (mr *MockMoviesEventsMQMockRecorder) MovieDeleted(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MovieDeleted", reflect.TypeOf((*MockMoviesEventsMQ)(nil).MovieDeleted), ctx, id)
}
