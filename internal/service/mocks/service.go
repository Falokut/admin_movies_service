// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	context "context"
	reflect "reflect"

	service "github.com/Falokut/admin_movies_service/internal/service"
	protos "github.com/Falokut/admin_movies_service/pkg/admin_movies_service/v1/protos"
	gomock "github.com/golang/mock/gomock"
)

// MockMoviesRepository is a mock of MoviesRepository interface.
type MockMoviesRepository struct {
	ctrl     *gomock.Controller
	recorder *MockMoviesRepositoryMockRecorder
}

// MockMoviesRepositoryMockRecorder is the mock recorder for MockMoviesRepository.
type MockMoviesRepositoryMockRecorder struct {
	mock *MockMoviesRepository
}

// NewMockMoviesRepository creates a new mock instance.
func NewMockMoviesRepository(ctrl *gomock.Controller) *MockMoviesRepository {
	mock := &MockMoviesRepository{ctrl: ctrl}
	mock.recorder = &MockMoviesRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMoviesRepository) EXPECT() *MockMoviesRepositoryMockRecorder {
	return m.recorder
}

// CreateAgeRating mocks base method.
func (m *MockMoviesRepository) CreateAgeRating(ctx context.Context, in *protos.CreateAgeRatingRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAgeRating", ctx, in)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateAgeRating indicates an expected call of CreateAgeRating.
func (mr *MockMoviesRepositoryMockRecorder) CreateAgeRating(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAgeRating", reflect.TypeOf((*MockMoviesRepository)(nil).CreateAgeRating), ctx, in)
}

// CreateMovie mocks base method.
func (m *MockMoviesRepository) CreateMovie(ctx context.Context, in *protos.CreateMovieRequest) (*protos.CreateMovieResponce, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMovie", ctx, in)
	ret0, _ := ret[0].(*protos.CreateMovieResponce)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMovie indicates an expected call of CreateMovie.
func (mr *MockMoviesRepositoryMockRecorder) CreateMovie(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMovie", reflect.TypeOf((*MockMoviesRepository)(nil).CreateMovie), ctx, in)
}

// DeleteAgeRating mocks base method.
func (m *MockMoviesRepository) DeleteAgeRating(ctx context.Context, in *protos.DeleteAgeRatingRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAgeRating", ctx, in)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAgeRating indicates an expected call of DeleteAgeRating.
func (mr *MockMoviesRepositoryMockRecorder) DeleteAgeRating(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAgeRating", reflect.TypeOf((*MockMoviesRepository)(nil).DeleteAgeRating), ctx, in)
}

// DeleteMovie mocks base method.
func (m *MockMoviesRepository) DeleteMovie(ctx context.Context, in *protos.DeleteMovieRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMovie", ctx, in)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMovie indicates an expected call of DeleteMovie.
func (mr *MockMoviesRepositoryMockRecorder) DeleteMovie(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMovie", reflect.TypeOf((*MockMoviesRepository)(nil).DeleteMovie), ctx, in)
}

// GetAgeRatings mocks base method.
func (m *MockMoviesRepository) GetAgeRatings(ctx context.Context) (*protos.AgeRatings, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAgeRatings", ctx)
	ret0, _ := ret[0].(*protos.AgeRatings)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAgeRatings indicates an expected call of GetAgeRatings.
func (mr *MockMoviesRepositoryMockRecorder) GetAgeRatings(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAgeRatings", reflect.TypeOf((*MockMoviesRepository)(nil).GetAgeRatings), ctx)
}

// GetMovie mocks base method.
func (m *MockMoviesRepository) GetMovie(ctx context.Context, in *protos.GetMovieRequest) (*protos.Movie, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMovie", ctx, in)
	ret0, _ := ret[0].(*protos.Movie)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMovie indicates an expected call of GetMovie.
func (mr *MockMoviesRepositoryMockRecorder) GetMovie(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMovie", reflect.TypeOf((*MockMoviesRepository)(nil).GetMovie), ctx, in)
}

// GetMovieDuration mocks base method.
func (m *MockMoviesRepository) GetMovieDuration(ctx context.Context, id int32) (uint32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMovieDuration", ctx, id)
	ret0, _ := ret[0].(uint32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMovieDuration indicates an expected call of GetMovieDuration.
func (mr *MockMoviesRepositoryMockRecorder) GetMovieDuration(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMovieDuration", reflect.TypeOf((*MockMoviesRepository)(nil).GetMovieDuration), ctx, id)
}

// GetMovies mocks base method.
func (m *MockMoviesRepository) GetMovies(ctx context.Context, in *protos.GetMoviesRequest) (*protos.Movies, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMovies", ctx, in)
	ret0, _ := ret[0].(*protos.Movies)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMovies indicates an expected call of GetMovies.
func (mr *MockMoviesRepositoryMockRecorder) GetMovies(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMovies", reflect.TypeOf((*MockMoviesRepository)(nil).GetMovies), ctx, in)
}

// GetMoviesDuration mocks base method.
func (m *MockMoviesRepository) GetMoviesDuration(ctx context.Context, ids []int32) (map[int32]uint32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMoviesDuration", ctx, ids)
	ret0, _ := ret[0].(map[int32]uint32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMoviesDuration indicates an expected call of GetMoviesDuration.
func (mr *MockMoviesRepositoryMockRecorder) GetMoviesDuration(ctx, ids interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMoviesDuration", reflect.TypeOf((*MockMoviesRepository)(nil).GetMoviesDuration), ctx, ids)
}

// IsMovieExists mocks base method.
func (m *MockMoviesRepository) IsMovieExists(ctx context.Context, in *protos.IsMovieExistsRequest) (*protos.IsMovieExistsResponce, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsMovieExists", ctx, in)
	ret0, _ := ret[0].(*protos.IsMovieExistsResponce)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsMovieExists indicates an expected call of IsMovieExists.
func (mr *MockMoviesRepositoryMockRecorder) IsMovieExists(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsMovieExists", reflect.TypeOf((*MockMoviesRepository)(nil).IsMovieExists), ctx, in)
}

// UpdateMovie mocks base method.
func (m *MockMoviesRepository) UpdateMovie(ctx context.Context, in *protos.UpdateMovieRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMovie", ctx, in)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateMovie indicates an expected call of UpdateMovie.
func (mr *MockMoviesRepositoryMockRecorder) UpdateMovie(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMovie", reflect.TypeOf((*MockMoviesRepository)(nil).UpdateMovie), ctx, in)
}

// UpdateMoviePictures mocks base method.
func (m *MockMoviesRepository) UpdateMoviePictures(ctx context.Context, in *protos.UpdateMoviePicturesRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMoviePictures", ctx, in)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateMoviePictures indicates an expected call of UpdateMoviePictures.
func (mr *MockMoviesRepositoryMockRecorder) UpdateMoviePictures(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMoviePictures", reflect.TypeOf((*MockMoviesRepository)(nil).UpdateMoviePictures), ctx, in)
}

// MockImagesService is a mock of ImagesService interface.
type MockImagesService struct {
	ctrl     *gomock.Controller
	recorder *MockImagesServiceMockRecorder
}

// MockImagesServiceMockRecorder is the mock recorder for MockImagesService.
type MockImagesServiceMockRecorder struct {
	mock *MockImagesService
}

// NewMockImagesService creates a new mock instance.
func NewMockImagesService(ctrl *gomock.Controller) *MockImagesService {
	mock := &MockImagesService{ctrl: ctrl}
	mock.recorder = &MockImagesServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockImagesService) EXPECT() *MockImagesServiceMockRecorder {
	return m.recorder
}

// DeletePicture mocks base method.
func (m *MockImagesService) DeletePicture(ctx context.Context, category, pictureID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePicture", ctx, category, pictureID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePicture indicates an expected call of DeletePicture.
func (mr *MockImagesServiceMockRecorder) DeletePicture(ctx, category, pictureID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePicture", reflect.TypeOf((*MockImagesService)(nil).DeletePicture), ctx, category, pictureID)
}

// GetPictureURL mocks base method.
func (m *MockImagesService) GetPictureURL(pictureID, category string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPictureURL", pictureID, category)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetPictureURL indicates an expected call of GetPictureURL.
func (mr *MockImagesServiceMockRecorder) GetPictureURL(pictureID, category interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPictureURL", reflect.TypeOf((*MockImagesService)(nil).GetPictureURL), pictureID, category)
}

// ReplacePicture mocks base method.
func (m *MockImagesService) ReplacePicture(ctx context.Context, picture service.ReplacePicturesParam, createIfNotExist bool) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReplacePicture", ctx, picture, createIfNotExist)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReplacePicture indicates an expected call of ReplacePicture.
func (mr *MockImagesServiceMockRecorder) ReplacePicture(ctx, picture, createIfNotExist interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReplacePicture", reflect.TypeOf((*MockImagesService)(nil).ReplacePicture), ctx, picture, createIfNotExist)
}

// ReplacePictures mocks base method.
func (m *MockImagesService) ReplacePictures(ctx context.Context, pictures map[string]service.ReplacePicturesParam) (map[string]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReplacePictures", ctx, pictures)
	ret0, _ := ret[0].(map[string]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReplacePictures indicates an expected call of ReplacePictures.
func (mr *MockImagesServiceMockRecorder) ReplacePictures(ctx, pictures interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReplacePictures", reflect.TypeOf((*MockImagesService)(nil).ReplacePictures), ctx, pictures)
}

// UploadPicture mocks base method.
func (m *MockImagesService) UploadPicture(ctx context.Context, picture service.UploadPictureParam) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadPicture", ctx, picture)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UploadPicture indicates an expected call of UploadPicture.
func (mr *MockImagesServiceMockRecorder) UploadPicture(ctx, picture interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadPicture", reflect.TypeOf((*MockImagesService)(nil).UploadPicture), ctx, picture)
}

// UploadPictures mocks base method.
func (m *MockImagesService) UploadPictures(ctx context.Context, pictures map[string]service.UploadPictureParam) (map[string]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadPictures", ctx, pictures)
	ret0, _ := ret[0].(map[string]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UploadPictures indicates an expected call of UploadPictures.
func (mr *MockImagesServiceMockRecorder) UploadPictures(ctx, pictures interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadPictures", reflect.TypeOf((*MockImagesService)(nil).UploadPictures), ctx, pictures)
}

// MockExistanceChecker is a mock of ExistanceChecker interface.
type MockExistanceChecker struct {
	ctrl     *gomock.Controller
	recorder *MockExistanceCheckerMockRecorder
}

// MockExistanceCheckerMockRecorder is the mock recorder for MockExistanceChecker.
type MockExistanceCheckerMockRecorder struct {
	mock *MockExistanceChecker
}

// NewMockExistanceChecker creates a new mock instance.
func NewMockExistanceChecker(ctrl *gomock.Controller) *MockExistanceChecker {
	mock := &MockExistanceChecker{ctrl: ctrl}
	mock.recorder = &MockExistanceCheckerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExistanceChecker) EXPECT() *MockExistanceCheckerMockRecorder {
	return m.recorder
}

// CheckExistance mocks base method.
func (m *MockExistanceChecker) CheckExistance(ctx context.Context, countriesIDs, genresIDs []int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckExistance", ctx, countriesIDs, genresIDs)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckExistance indicates an expected call of CheckExistance.
func (mr *MockExistanceCheckerMockRecorder) CheckExistance(ctx, countriesIDs, genresIDs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckExistance", reflect.TypeOf((*MockExistanceChecker)(nil).CheckExistance), ctx, countriesIDs, genresIDs)
}
