syntax= "proto3";

package admin_movies_service;
import "admin_movies_service_v1_messages.proto";
option go_package = "admin_movies_service/v1/protos";
import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";
import "google/protobuf/empty.proto";


option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
    schemes: HTTP;
    //schemes: HTTPS;
    consumes: "application/json";
    produces: "application/json";

    info: {
        title: "Admin movies service";
        version: "1.0";
        contact: {
            name: "Falokut";
            url: "https://github.com/Falokut";
            email: "timur.sinelnik@yandex.ru";
        };
    }
    responses: {
		key: "404";
		value: {
			description: "Returned when the resource does not exist.";
			schema: {
				json_schema: {
					ref: "#/definitions/rpcStatus";
				}
			}
		}
	}
    responses: {
		key: "500";
		value: {
			description: "Something went wrong.";
			schema: {
				json_schema: {
					ref: "#/definitions/rpcStatus";
				}
			}
		}
	}
};

service moviesServiceV1 {
    // Returns movie with the specified id.
    rpc GetMovie(GetMovieRequest) returns(Movie) {
        option (google.api.http) = {
            get: "/v1/movie"
        };
    }

    // Returns movie duration for the movie with specified id.
    rpc GetMovieDuration(GetMovieDurationRequest) returns(MovieDuration) {
        option (google.api.http) = {
            get: "/v1/movie/duration"
        };
    }

    // Returns movies with the specified ids.
    rpc GetMovies(GetMoviesRequest) returns(Movies) {
        option (google.api.http) = {
            get: "/v1/movies"
        };
    }

    // Returns movies durations with the specified ids.
    rpc GetMoviesDuration(GetMoviesDurationRequest) returns(MoviesDuration) {
        option (google.api.http) = {
            get: "/v1/movies/duration"
        };
    }

    // Create movie, returns created movie id.
    rpc CreateMovie(CreateMovieRequest) returns(CreateMovieResponce) {
        option (google.api.http) = {
            post: "/v1/movie"
            body: "*"
        };
    }

    // Delete movie with the specified ids.
    rpc DeleteMovie(DeleteMovieRequest) returns(google.protobuf.Empty) {
        option (google.api.http) = {
            delete: "/v1/movie/{movieID}"
        };
    }

    // Check movie existance, returns false, if movie doesn't exist.
    rpc IsMovieExists(IsMovieExistsRequest) returns(IsMovieExistsResponce) {
        option (google.api.http) = {
            get: "/v1/movie/{movieID}/exists"
        };
    }

    // Update movie fields.
    rpc UpdateMovie(UpdateMovieRequest) returns(google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/v1/movie/{movieID}"
            body:"*"
        };
    }

    // Update movie pictures.
    rpc UpdateMoviePictures(UpdateMoviePicturesRequest) returns(google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/v1/movie/{movieID}/update-pictures"
            body:"*"
        };
    }

    // Returns all age ratings.
    rpc GetAgeRatings(google.protobuf.Empty) returns(AgeRatings){
        option (google.api.http) = {
            get: "/v1/age-ratings"
        };
    }

    // Create age rating. 
    rpc CreateAgeRating(CreateAgeRatingRequest) returns(google.protobuf.Empty){
        option (google.api.http) = {
            post: "/v1/age-rating"
            body: "*"
        };
    }

    // Delete age rating. 
    rpc DeleteAgeRating(DeleteAgeRatingRequest) returns(google.protobuf.Empty){
        option (google.api.http) = {
            delete: "/v1/age-ratings/{AgeRatingName}"
        };
    }

    // Returns genre with specified id.
    rpc GetGenre(GetGenreRequest) returns(Genre) {
        option (google.api.http) = {
            get: "/v1/genre/{genre_id}"
        };
    }

    // Returns genre with specified name.
    rpc GetGenreByName(GetGenreByNameRequest) returns(Genre) {
        option (google.api.http) = {
            get: "/v1/genre"
        };
    }
      
    // Create genre. 
    rpc CreateGenre(CreateGenreRequest) returns(CreateGenreResponce) {
        option (google.api.http) = {
            post: "/v1/genre"
            body: "*"
        };
    }
    
    // Returns all genres.
    rpc GetGenres(google.protobuf.Empty) returns(Genres) {
        option (google.api.http) = {
            get: "/v1/genres"
        };
    }

    // Update genre with specified id.
    rpc UpdateGenre(UpdateGenreRequest) returns(google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/v1/genre/{GenreID}"
            body: "*"
        };
    }
    
    // Delete genre with specified id.
    rpc DeleteGenre(DeleteGenreRequest) returns(google.protobuf.Empty) {
        option (google.api.http) = {
            delete: "/v1/genre/{genre_id}"
        };
    }
    
    // Check genres existance, returns false and not exists ids, if any genre in request doesn't exist.
    rpc IsGenresExists(IsGenresExistsRequest) returns(ExistsResponce) {
        option (google.api.http) = {
            get: "/v1/genres/exists"
        };
    }

    // Returns county with specified id.
    rpc GetCountry(GetCountryRequest) returns(Country) {
        option (google.api.http) = {
            get: "/v1/country/{country_id}"
        };
    }

    // Returns country with specified name.
    rpc GetCountryByName(GetCountryByNameRequest) returns(Country) {
        option (google.api.http) = {
            get: "/v1/country"
        };
    }

    // Create country.
    rpc CreateCountry(CreateCountryRequest) returns(CreateCountryResponce) {
        option (google.api.http) = {
            post: "/v1/country"
            body: "*"
        };
    }

    // Returns all countries.
    rpc GetCountries(google.protobuf.Empty) returns(Countries) {
        option (google.api.http) = {
            get: "/v1/countries"
        };
    }

    // Update country with specified id.
    rpc UpdateCountry(UpdateCountryRequest) returns(google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/v1/country/{countryID}"
            body: "*"
        };
    }

    // Delete country with specified id.
    rpc DeleteCountry(DeleteCountryRequest) returns(google.protobuf.Empty) {
        option (google.api.http) = {
            delete: "/v1/country/{country_id}"
        };
    }

    // Check countries existance, returns false and not exists ids, if any country in request doesn't exist.
    rpc IsCountriesExists(IsCountriesExistsRequest) returns(ExistsResponce) {
        option (google.api.http) = {
          get: "/v1/countries/exists"
        };
    }
}